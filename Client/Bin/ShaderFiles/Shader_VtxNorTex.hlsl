matrix g_WorldMatrix, g_ViewMatrix, g_ProjMatrix;
texture2D g_Texture;

vector g_vLightDir = vector(1.f, -1.f, 1.f, 0.f);
vector g_vLightDiffuse = vector(1.f, 1.f, 1.f, 1.f);
vector g_vLightAmbient = vector(0.4f, 0.4f, 0.4f, 1.f);

/* 재질 
*/
texture2D g_DiffuseTexture;
vector g_vMtrlAmbient = 1.f;

sampler DefaultSampler = sampler_state
{
    filter = min_mag_mip_linear;
    AddressU = wrap;
    AddressV = wrap;
};

struct VS_IN
{
    float3 vPosition : POSITION;
    float3 vNormal   : NORMAL;
    float2 vTexcoord : TEXCOORD0;
};

struct VS_OUT
{
    float4 vPosition : SV_POSITION;
    float4 vNormal : NORMAL;
    float2 vTexcoord : TEXCOORD0;
    float4 vWorldPos : TEXCOORD1;
};

/* 정점쉐이더 : 정점 위치의 스페이스 변환(로컬 -> 월드 -> 뷰 -> 투영). */ 
/*          : 정점의 구성을 변경.(in:3개, out:2개 or 5개) */
/*          : 정점 단위(정점 하나당 VS_MAIN한번호출) */ 
VS_OUT VS_MAIN(VS_IN In)
{
    VS_OUT Out = (VS_OUT) 0;
    
    /* 정점의 로컬위치 * 월드 * 뷰 * 투영 */ 
        
    float4x4 matWV, matWVP;
    
    matWV = mul(g_WorldMatrix, g_ViewMatrix);
    matWVP = mul(matWV, g_ProjMatrix);
    
    Out.vPosition = mul(float4(In.vPosition, 1.f), matWVP);
    Out.vNormal = mul(float4(In.vNormal, 0.f), g_WorldMatrix); // 정점의 노말 벡터를 World 행렬을 곱해준다.
    Out.vTexcoord = In.vTexcoord;
    Out.vWorldPos = mul(float4(In.vPosition, 1.f), g_WorldMatrix);
    
    return Out;
}

/* /W을 수행한다. 투영스페이스로 변환 */
/* 뷰포트로 변환하고.*/
/* 래스터라이즈 : 픽셀을 만든다. */

struct PS_IN
{
    float4 vPosition : SV_POSITION;
    float4 vNormal : NORMAL;
    float2 vTexcoord : TEXCOORD0;    
    float4 vWorldPos : TEXCOORD1;
};

struct PS_OUT
{
    float4 vColor : SV_TARGET0;
    
};

/* 만든 픽셀 각각에 대해서 픽셀 쉐이더를 수행한다. */
/* 픽셀의 색을 결정한다. */



PS_OUT PS_MAIN(PS_IN In)
{
    PS_OUT Out = (PS_OUT) 0;
    
    vector vMtrlDiffuse = g_Texture.Sample(DefaultSampler, In.vTexcoord * 50.f);
    
    
    float fShade = max(dot((normalize(g_vLightDir) * -1.f), normalize(In.vNormal)), 0.f); // 명암 계산.
    Out.vColor = (g_vLightDiffuse * vMtrlDiffuse) * saturate(fShade + (g_vLightAmbient * g_vMtrlAmbient));
    
    return Out;
}


//int g_iTextureIndex;


// Texture Index에 따라서 다른 픽셀 쉐이더를 제공하기.
//PS_OUT PS_MAIN2(PS_IN In)
//{
//    PS_OUT Out = (PS_OUT) 0;
    
//    float2 uv = In.vTexcoord;
    
//    float4 baseColor = g_Texture.Sample(DefaultSampler, uv); // 원본 텍스처 색
//    float4 fillerColor = float4(1, 1, 1, 1); // 다이아몬드 안에 채워질 색
    
//    // 다이아몬드 중심
//    float2 center = float2(0.5f, 0.5f);
//    float2 delta = abs(uv - center);
//    bool bIsInDiamond = (delta.x + delta.y) < 0.5f;
    
//    if (bIsInDiamond)
//    {
//        Out.vColor = lerp(baseColor, fillerColor, 0.8f); // 부드럽게 섞기
//    }
//    else
//    {
//        Out.vColor = baseColor;
//    }
    
//    return Out;
//}


//float g_
//;
//PS_OUT PS_MAIN3(PS_IN In)
//{
//    PS_OUT Out = (PS_OUT) 0;

//    float2 uv = In.vTexcoord;
//    float4 fillerColor = float4(0, 0, 0, 1); // 다이아몬드 안에 채워질 색
//    float4 baseColor = g_Texture.Sample(DefaultSampler, uv); // 원본 텍스처 색

    
//    // 다이아몬드 중심
//    float2 center = float2(0.5f, 0.5f);
//    float2 delta = abs(uv - center);
//    bool bIsInDiamond = (delta.x + delta.y) < 0.51f;

//    // 아래서 위로 채우기
//    bool bIsFillRegion = uv.y > (1.0 - g_fFillRatio);

//    if (bIsInDiamond && bIsFillRegion)
//    {
//        // 다이아몬드 내부이면서, 채워질 영역이면
//        Out.vColor = lerp(baseColor, fillerColor, 0.8f); // 부드럽게 섞기
//    }
//    else
//    {
//        // 그 외는 원본 텍스처 유지
//        Out.vColor = baseColor;
//    }

//    return Out;
//}

//float g_fFade;

//// Fade Out Shader
//PS_OUT PS_MAIN4(PS_IN In)
//{
//    PS_OUT Out = (PS_OUT) 0;

//    float2 uv = In.vTexcoord;
//    float4 baseColor = g_Texture.Sample(DefaultSampler, uv);
//    float4 fillerColor = float4(0, 0, 0, 1);
    
//    baseColor.rgb = lerp(baseColor.rgb, float3(0.0, 0.0, 0.0), saturate(g_fFade));
    
//    // 핵심 한 줄: 원본→검정으로 선형 보간
//    Out.vColor = baseColor;
    

//    return Out;
//}


technique11 DefaultTechnique
{
    /* 특정 패스를 이용해서 점정을 그려냈다. */
    /* 하나의 모델을 그려냈다. */ 
    /* 모델의 상황에 따라 다른 쉐이딩 기법 세트(명암 + 림라이트 + 스펙큘러 + 노멀맵 + ssao )를 먹여주기위해서 */
    pass DefaultPass
    {
        VertexShader = compile vs_5_0 VS_MAIN();
        PixelShader = compile ps_5_0 PS_MAIN();
    }

    //pass LoadingSlotPass
    //{
    //    VertexShader = compile vs_5_0 VS_MAIN();
    //    PixelShader = compile ps_5_0 PS_MAIN2();
    //}

    //pass SkillSlotPass
    //{
    //    VertexShader = compile vs_5_0 VS_MAIN();
    //    PixelShader = compile ps_5_0 PS_MAIN3();
    //}

    //pass FadeOutPass
    //{
    //    VertexShader = compile vs_5_0 VS_MAIN();
    //    PixelShader = compile ps_5_0 PS_MAIN4();
    //}
    



    ///* 모델의 상황에 따라 다른 쉐이딩 기법 세트(블렌딩 + 디스토션  )를 먹여주기위해서 */
    //pass DefaultPass1
    //{
    //    VertexShader = compile vs_5_0 VS_MAIN1();

    //}

    ///* 정점의 정보에 따라 쉐이더 파일을 작성한다. */
    ///* 정점의 정보가 같지만 완전히 다른 취급을 하느 ㄴ객체나 모델을 그리는 방식 -> 렌더링방식에 차이가 생길 수 있다. */ 
    //pass DefaultPass1
    //{
    //    VertexShader = compile vs_5_0 VS_MAIN1();

    //}

}
